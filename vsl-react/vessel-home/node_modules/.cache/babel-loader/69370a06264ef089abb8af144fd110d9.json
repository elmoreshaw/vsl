{"ast":null,"code":"// check document first so it doesn't error in node.js\nvar style = typeof document != 'undefined' ? document.createElement('p').style : {};\nvar prefixes = ['O', 'ms', 'Moz', 'Webkit'];\nvar upper = /([A-Z])/g;\nvar memo = {};\n/**\n * prefix `key`\n *\n *   prefix('transform') // => WebkitTransform\n *\n * @param {String} key\n * @return {String}\n * @api public\n */\n\nfunction prefix(key) {\n  // Camel case\n  key = key.replace(/-([a-z])/g, function (_, char) {\n    return char.toUpperCase();\n  }); // Without prefix\n\n  if (style[key] !== undefined) return key; // With prefix\n\n  var Key = key.charAt(0).toUpperCase() + key.slice(1);\n  var i = prefixes.length;\n\n  while (i--) {\n    var name = prefixes[i] + Key;\n    if (style[name] !== undefined) return name;\n  }\n\n  return key;\n}\n/**\n * Memoized version of `prefix`\n *\n * @param {String} key\n * @return {String}\n * @api public\n */\n\n\nfunction prefixMemozied(key) {\n  return key in memo ? memo[key] : memo[key] = prefix(key);\n}\n/**\n * Create a dashed prefix\n *\n * @param {String} key\n * @return {String}\n * @api public\n */\n\n\nfunction prefixDashed(key) {\n  key = prefix(key);\n\n  if (upper.test(key)) {\n    key = '-' + key.replace(upper, '-$1');\n    upper.lastIndex = 0;\n  }\n\n  return key.toLowerCase();\n}\n\nmodule.exports = prefixMemozied;\nmodule.exports.dash = prefixDashed;","map":{"version":3,"sources":["/home/grady/Documents/work/Vessel/dApp/vessel-home/node_modules/prefix/index.js"],"names":["style","document","createElement","prefixes","upper","memo","prefix","key","replace","_","char","toUpperCase","undefined","Key","charAt","slice","i","length","name","prefixMemozied","prefixDashed","test","lastIndex","toLowerCase","module","exports","dash"],"mappings":"AAAA;AACA,IAAIA,KAAK,GAAG,OAAOC,QAAP,IAAmB,WAAnB,GACRA,QAAQ,CAACC,aAAT,CAAuB,GAAvB,EAA4BF,KADpB,GAER,EAFJ;AAIA,IAAIG,QAAQ,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,KAAZ,EAAmB,QAAnB,CAAf;AACA,IAAIC,KAAK,GAAG,UAAZ;AACA,IAAIC,IAAI,GAAG,EAAX;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,GAAhB,EAAoB;AAClB;AACAA,EAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,WAAZ,EAAyB,UAASC,CAAT,EAAYC,IAAZ,EAAiB;AAC9C,WAAOA,IAAI,CAACC,WAAL,EAAP;AACD,GAFK,CAAN,CAFkB,CAMlB;;AACA,MAAIX,KAAK,CAACO,GAAD,CAAL,KAAeK,SAAnB,EAA8B,OAAOL,GAAP,CAPZ,CASlB;;AACA,MAAIM,GAAG,GAAGN,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAcH,WAAd,KAA8BJ,GAAG,CAACQ,KAAJ,CAAU,CAAV,CAAxC;AACA,MAAIC,CAAC,GAAGb,QAAQ,CAACc,MAAjB;;AACA,SAAOD,CAAC,EAAR,EAAY;AACV,QAAIE,IAAI,GAAGf,QAAQ,CAACa,CAAD,CAAR,GAAcH,GAAzB;AACA,QAAIb,KAAK,CAACkB,IAAD,CAAL,KAAgBN,SAApB,EAA+B,OAAOM,IAAP;AAChC;;AAED,SAAOX,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASY,cAAT,CAAwBZ,GAAxB,EAA4B;AAC1B,SAAOA,GAAG,IAAIF,IAAP,GACHA,IAAI,CAACE,GAAD,CADD,GAEHF,IAAI,CAACE,GAAD,CAAJ,GAAYD,MAAM,CAACC,GAAD,CAFtB;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASa,YAAT,CAAsBb,GAAtB,EAA0B;AACxBA,EAAAA,GAAG,GAAGD,MAAM,CAACC,GAAD,CAAZ;;AACA,MAAIH,KAAK,CAACiB,IAAN,CAAWd,GAAX,CAAJ,EAAqB;AACnBA,IAAAA,GAAG,GAAG,MAAMA,GAAG,CAACC,OAAJ,CAAYJ,KAAZ,EAAmB,KAAnB,CAAZ;AACAA,IAAAA,KAAK,CAACkB,SAAN,GAAkB,CAAlB;AACD;;AACD,SAAOf,GAAG,CAACgB,WAAJ,EAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBN,cAAjB;AACAK,MAAM,CAACC,OAAP,CAAeC,IAAf,GAAsBN,YAAtB","sourcesContent":["// check document first so it doesn't error in node.js\nvar style = typeof document != 'undefined'\n  ? document.createElement('p').style\n  : {}\n\nvar prefixes = ['O', 'ms', 'Moz', 'Webkit']\nvar upper = /([A-Z])/g\nvar memo = {}\n\n/**\n * prefix `key`\n *\n *   prefix('transform') // => WebkitTransform\n *\n * @param {String} key\n * @return {String}\n * @api public\n */\nfunction prefix(key){\n  // Camel case\n  key = key.replace(/-([a-z])/g, function(_, char){\n    return char.toUpperCase()\n  })\n\n  // Without prefix\n  if (style[key] !== undefined) return key\n\n  // With prefix\n  var Key = key.charAt(0).toUpperCase() + key.slice(1)\n  var i = prefixes.length\n  while (i--) {\n    var name = prefixes[i] + Key\n    if (style[name] !== undefined) return name\n  }\n\n  return key\n}\n\n/**\n * Memoized version of `prefix`\n *\n * @param {String} key\n * @return {String}\n * @api public\n */\nfunction prefixMemozied(key){\n  return key in memo\n    ? memo[key]\n    : memo[key] = prefix(key)\n}\n\n/**\n * Create a dashed prefix\n *\n * @param {String} key\n * @return {String}\n * @api public\n */\nfunction prefixDashed(key){\n  key = prefix(key)\n  if (upper.test(key)) {\n    key = '-' + key.replace(upper, '-$1')\n    upper.lastIndex = 0\n  }\n  return key.toLowerCase()\n}\n\nmodule.exports = prefixMemozied\nmodule.exports.dash = prefixDashed\n"]},"metadata":{},"sourceType":"script"}